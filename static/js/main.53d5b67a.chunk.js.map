{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","contacts","addContact","useState","name","setName","number","setNumber","handleChange","e","target","value","onSubmit","preventDefault","isDublicate","map","item","toLowerCase","alert","isDuplicate","type","placeholder","onChange","Filter","className","s","ContactList","filter","deleteContact","includes","id","onClick","App","parseContacts","JSON","parse","localStorage","getItem","initialContacts","setContacts","setFilter","useEffect","setItem","stringify","contact","uuid","Boolean","length","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53d5b67a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__13gOn\"};","import { useState } from 'react';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ contacts, addContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const inputName = e.target.name;\n\n    switch (inputName) {\n      case 'name':\n        setName(e.target.value);\n        break;\n\n      case 'number':\n        setNumber(e.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const isDuplicate = () => {\n    let isDublicate = false;\n\n    contacts.map(item => {\n      if (item.name.toLowerCase() === name.toLowerCase()) {\n        alert(`${item.name} is already in contacts.`);\n        isDublicate = true;\n      }\n    });\n\n    return isDublicate;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (name && number && !isDuplicate()) {\n      addContact(name, number);\n      resetState();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label>\n        Phone number\n        <input\n          name=\"number\"\n          type=\"number\"\n          placeholder=\"Enter number\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contact by name\n    <input\n      className={s.Filter}\n      name=\"filter\"\n      type=\"text\"\n      placeholder=\"Enter to find\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nexport default Filter;\n","import s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, filter, deleteContact }) => (\n  <ul>\n    {contacts.map(\n      item =>\n        item.name.toLowerCase().includes(filter.toLowerCase()) && (\n          <li key={item.id}>\n            {item.name}: {item.number}{' '}\n            <button id={item.id} type=\"button\" onClick={deleteContact}>\n              Delete\n            </button>\n          </li>\n        ),\n    )}\n  </ul>\n);\n\nexport default ContactList;\n","import { useState, useEffect } from 'react';\nimport { v4 as uuid } from 'uuid';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nimport './App.css';\n\nfunction App() {\n  const parseContacts = JSON.parse(localStorage.getItem('contacts'));\n  const initialContacts = parseContacts ? parseContacts : [];\n\n  const [contacts, setContacts] = useState(initialContacts);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const handleChange = e => {\n    setFilter(e.target.value);\n  };\n\n  const addContact = (name, number) => {\n    const contact = {\n      id: uuid(),\n      name: name,\n      number: number,\n    };\n\n    setContacts([contact, ...contacts]);\n  };\n\n  const deleteContact = e => {\n    this.setState(contacts.filter(contact => contact.id !== e.target.id));\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Phonebook</h2>\n      <ContactForm addContact={addContact} contacts={contacts} />\n\n      <h2>Contacts</h2>\n      {Boolean(contacts.length) && (\n        <div className=\"contacts\">\n          <Filter value={filter} onChange={handleChange} />\n\n          <ContactList\n            contacts={contacts}\n            filter={filter}\n            deleteContact={deleteContact}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//   };\n\n//   componentDidMount() {\n//     const contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n//     if (contacts) {\n//       this.setState({ contacts: contacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const prevContacts = prevState.contacts;\n//     const nextContacts = this.state.contacts;\n\n//     if (prevContacts !== nextContacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\n//     }\n//   }\n\n//   handleChange = (e) => {\n//     this.setState({ filter: e.target.value });\n//   };\n\n//   addContact = (name, number) => {\n//     const contact = {\n//       id: uuid(),\n//       name: name,\n//       number: number,\n//     };\n\n//     this.setState(({ contacts }) => ({\n//       contacts: [contact, ...contacts],\n//     }));\n//   };\n\n//   deleteContact = (e) => {\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(\n//         (contact) => contact.id !== e.target.id\n//       ),\n//     }));\n//   };\n\n//   render() {\n//     // localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n\n//     return (\n//       <div className=\"container\">\n//         <h2>Phonebook</h2>\n//         <ContactForm\n//           addContact={this.addContact}\n//           contacts={this.state.contacts}\n//         />\n\n//         <h2>Contacts</h2>\n//         {Boolean(this.state.contacts.length) && (\n//           <div className=\"contacts\">\n//             <Filter value={this.state.filter} onChange={this.handleChange} />\n\n//             <ContactList\n//               contacts={this.state.contacts}\n//               filter={this.state.filter}\n//               deleteContact={this.deleteContact}\n//             />\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}